[{"D:\\responsive-sota-tek\\src\\index.js":"1","D:\\responsive-sota-tek\\src\\App.js":"2","D:\\responsive-sota-tek\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1611646656280,"results":"4","hashOfConfig":"5"},{"size":8788,"mtime":1611734077588,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1611646656282,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wdgof2",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\responsive-sota-tek\\src\\index.js",[],"D:\\responsive-sota-tek\\src\\App.js",["15","16"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const [startTime, setStartTime] = useState(0);\r\n  const [textSearch, setTextSearch] = useState(\"\");\r\n  const [listChecked, setListChecked] = useState({});\r\n  const [listCollapse, setListCollapse] = useState({});\r\n\r\n  const [listTask, setListTask] = useState([]);\r\n  const [listTaskUpdate, setListTaskUpdate] = useState({});\r\n  const [itemTask, setItemTask] = useState({piority: \"normal\"});\r\n\r\n  useEffect(() => {\r\n    let today = new Date(),\r\n    dateNow = today.getFullYear() + '-' + (\"0\" + (today.getMonth() + 1)).slice(-2) + '-' + (\"0\" + today.getDate()).slice(-2);\r\n    setStartTime(dateNow)\r\n    setItemTask({...itemTask, date: dateNow})\r\n  }, []);\r\n\r\n  const AddNewTask = () => {\r\n    let idIndex = 1;\r\n    if(listTask.length > 0){\r\n      const indexNumber = Object.keys(listTask).reduce((a, b) => listTask[a].id > listTask[b].id ? a : b);\r\n      idIndex = listTask[indexNumber].id + 1\r\n    }\r\n    let taskItem = {...itemTask, id: idIndex}\r\n    let taskList = [...listTask, taskItem];\r\n    let dataSort = taskList.sort((a,b) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0));\r\n\r\n    setListTask([...dataSort]);\r\n    setItemTask({piority: \"normal\", date: startTime});\r\n  }\r\n\r\n  const updateCollapse = (idData) => {\r\n      setListCollapse({...listCollapse, [idData]: listCollapse[idData]? !listCollapse[idData] : true})\r\n  }\r\n\r\n  const handleChecked = (idData) =>{\r\n    setListChecked({...listChecked, [idData]: listChecked[idData]? !listChecked[idData] : true})\r\n  }\r\n\r\n  const removeTaskChecked = () =>{\r\n    const listID =[]\r\n    Object.keys(listChecked).forEach(function(key) {\r\n      if(listChecked[key]){\r\n        listID.push(+key);\r\n      }\r\n    });\r\n    removeItemTask(listID);\r\n  }\r\n\r\n  const removeItemTask = (arrayIdData) =>{\r\n    const dataList = listTask.filter((item) => !arrayIdData.includes(item.id))\r\n    setListTask([...dataList]);\r\n    \r\n    arrayIdData.forEach(function(idData) {\r\n      if(listCollapse[idData])\r\n        delete listCollapse[idData];\r\n      if(listTaskUpdate[idData])\r\n        delete listTaskUpdate[idData];\r\n      if(listChecked[idData])\r\n        delete listChecked[idData];\r\n    })\r\n  }\r\n\r\n  const onChangeUpdate = (index, idData, fieldName, valueData) => {\r\n    const dataDefault = listTaskUpdate[idData]? listTaskUpdate[idData] : listTask[index];\r\n    listTaskUpdate[idData] = {...dataDefault, [fieldName]: valueData}\r\n    setListTaskUpdate({...listTaskUpdate});\r\n  }\r\n\r\n  const UpdateTaskItem = (index, idData, listData) => {\r\n    listTask[index]= listData[idData];\r\n    let dataSort = listTask.sort((a,b) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0))\r\n    setListTask([...dataSort]);\r\n  }\r\n\r\n  const itemContent = () => {\r\n    let listDataTask = listTask;\r\n    if(textSearch !== \"\") {\r\n      listDataTask = listTask.filter((item) => item.title.includes(textSearch));\r\n    }\r\n\r\n    return listDataTask.map((data, index) => (\r\n      <div className=\"task-item\" key={data.id}>\r\n        <div className=\"task-item__info d-flex\">\r\n          <div className=\"d-flex flex-align-center\">\r\n            <input type=\"checkbox\" id={`\"item-\"${data.id}`} onClick={()=>handleChecked(data.id)}/>\r\n            <label htmlFor={`\"item-\"${data.id}`}> {data.title}</label>\r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <div className=\"p-2\">\r\n              <button className=\"button-blue\" onClick={()=>updateCollapse(data.id)}>Detail</button>\r\n            </div>\r\n            <div className=\"p-2\">\r\n              <button className=\"button-red\" onClick={()=>removeItemTask([data.id])}>Remove</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={`task-item__form ${listCollapse[data.id]? \"d-block\" : \"d-none\"}`}>\r\n          <input className=\"form-control title-task\" type=\"text\"\r\n                  value={listTaskUpdate[data.id]?.title? listTaskUpdate[data.id].title : data.title} \r\n                  onChange={(e)=> onChangeUpdate(index, data.id, \"title\", e.target.value)} />\r\n          <p><strong>Description</strong></p>\r\n          <textarea className=\"form-control description-task\" rows=\"4\"\r\n                  value={listTaskUpdate[data.id]?.description? listTaskUpdate[data.id]?.description : data.description} \r\n                  onChange={(e)=> onChangeUpdate(index, data.id, \"description\", e.target.value)} />\r\n          <div className=\"row\">\r\n            <div className=\"col w-100\">\r\n              <p><strong>Due Date</strong></p>\r\n              <input className=\"form-control\" type=\"date\" min={startTime} max=\"2030-12-31\"\r\n                  value={listTaskUpdate[data.id]?.date? listTaskUpdate[data.id].date : data.date} \r\n                  onChange={(e)=> onChangeUpdate(index, data.id, \"date\", e.target.value)}/>\r\n            </div>\r\n            <div className=\"col w-100\">\r\n              <p><strong>Piority</strong></p>\r\n              <select className=\"form-control\" name=\"cars\" id=\"cars\"\r\n                value={listTaskUpdate[data.id]?.piority? listTaskUpdate[data.id].piority : data.piority} \r\n                onChange={(e)=> onChangeUpdate(index, data.id, \"piority\", e.target.value)}>\r\n                    <option value=\"low\">low</option>\r\n                    <option value=\"normal\">normal</option>\r\n                    <option value=\"high\">high</option>\r\n                  </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"py-5\">\r\n            <button className=\"button-green\" onClick={()=>UpdateTaskItem(index, data.id, listTaskUpdate)}>Update</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div className=\"container wrapper-screen\">\r\n        <div className=\"col block__left-side\">\r\n            <h2 className=\"text-center\">New Task</h2>\r\n            <div className=\"block-content\">\r\n              <input className=\"form-control title-task\" type=\"text\" placeholder=\"Add new task ...\"\r\n                        value={itemTask[\"title\"]? itemTask.title: \"\"} \r\n                        onChange={(e)=>setItemTask({...itemTask, title: e.target.value})} />\r\n              <p><strong>Description</strong></p>\r\n              <textarea className=\"form-control description-task\" rows=\"4\" \r\n                        value={itemTask[\"description\"]? itemTask.description: \"\"} \r\n                        onChange={(e)=>setItemTask({...itemTask, description: e.target.value})} />\r\n              <div className=\"row\">\r\n                <div className=\"col w-100\">\r\n                  <p><strong>Due Date</strong></p>\r\n                  <input className=\"form-control\" type=\"date\" min={startTime} max=\"2030-12-31\" \r\n                        value={itemTask[\"date\"]? itemTask.date: \"\"} \r\n                        onChange={(e)=>setItemTask({...itemTask, date: e.target.value})}/>\r\n                </div>\r\n                <div className=\"col w-100\">\r\n                  <p><strong>Piority</strong></p>\r\n                  <select className=\"form-control\"\r\n                        value={itemTask[\"piority\"]? itemTask.piority: \"normal\"} \r\n                        onChange={(e)=>setItemTask({...itemTask, piority: e.target.value})}>\r\n                              <option value=\"low\">low</option>\r\n                              <option value=\"normal\">normal</option>\r\n                              <option value=\"high\">high</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              <div className=\"py-5\">\r\n                <button className=\"button-green\" onClick={()=>AddNewTask()}>add</button>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"block__right-side\">\r\n          <div className=\"col\">\r\n            <h2 className=\"text-center\">To Do List</h2>\r\n            <div className=\"block-content\">              \r\n              <input className=\"form-control search-task\" type=\"text\" placeholder=\"Search...\" onChange={(e)=>{setTextSearch(e.target.value)}}/>\r\n              \r\n              <div className=\"list-task\">\r\n                {listTask.length >0  && itemContent()}\r\n              </div>\r\n\r\n             </div>\r\n            </div>\r\n            {Object.values(listChecked).filter(item=>item).length > 0 ? <div className=\"bottom-action d-flex bg-gray mt-5\">\r\n              <div>Bulk Action</div>\r\n              <div className=\"d-flex\">\r\n                <div className=\"p-2\">\r\n                  <button className=\"button-blue\">Done</button>\r\n                </div>\r\n                <div className=\"p-2\">\r\n                  <button className=\"button-red\" onClick={()=>removeTaskChecked()}>Remove</button>\r\n                </div>\r\n              </div>\r\n            </div> : null}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\responsive-sota-tek\\src\\reportWebVitals.js",[],{"ruleId":"17","severity":1,"message":"18","line":1,"column":8,"nodeType":"19","messageId":"20","endLine":1,"endColumn":12},{"ruleId":"21","severity":1,"message":"22","line":20,"column":6,"nodeType":"23","endLine":20,"endColumn":8,"suggestions":"24"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'itemTask'. Either include it or remove the dependency array. You can also do a functional update 'setItemTask(i => ...)' if you only need 'itemTask' in the 'setItemTask' call.","ArrayExpression",["25"],{"desc":"26","fix":"27"},"Update the dependencies array to be: [itemTask]",{"range":"28","text":"29"},[770,772],"[itemTask]"]